### Default variable file for ml_template_validation_backend_service-service ###

namespace: {{ namespace }}
imagepullsecrets: {{ imagepullsecrets }}
dockerhub: {{ docker_hub_url }}


env:
  javaoptions: {{ml_template_validation_backend_service_java_mem_limit|default('-Xmx4096m')}}

replicaCount: {{ml_template_validation_backend_service_replicacount|default(1)}}
repository: {{ image_ml_template_validation_backend_service_service }}
image_tag: {{ image_tag }}
resources:
  requests:
    cpu: {{ml_template_validation_backend_service_cpu_req|default('100m')}}
    memory: {{ml_template_validation_backend_service_mem_req|default('200Mi')}}
  limits:
    cpu: {{ ml_template_validation_backend_service_cpu_limit|default('2')}}
    memory: {{ml_template_validation_backend_service_mem_limit|default('6144Mi')}}
network:
  port: {{ service_ml_template_validation_backend_service_port }}
  targetport: {{ service_ml_template_validation_backend_service_port }}
strategy:
  type: RollingUpdate
  maxsurge: {{ ml_template_validation_backend_service_maxsurge|default('25%') }}
  maxunavailable: {{ ml_template_validation_backend_service_maxunavailable|default('25%') }}

environmentjs: |-
  FLASK_APP = app.py
  FLASK_RUN_PORT = 5000
  HOSTIP = http://ml-template-validation-backend-service:5000/
  mongoURL = mongodb://{{ml_mongodb_host | default(groups['mongo_master'][0]+':27017')}}/
  db = templateValidation
  userCollection = users
  conditionsCollection = conditions
  validationsCollection = validation
  sampleTemplatesCollection = sampleTemplates
  #AUTH SECRET_KEY
  SECRET_KEY = "{{ml_template_validation_backend_service_secret_key}}"
  admin-token = "{{ml_template_validation_backend_service_admin_token}}" 

configpy: |-
  connectionUrl="mongodb://{{ml_mongodb_host | default(groups['mongo_master'][0]+':27017')}}/"
  databaseName = "templateValidation"
  collectionName = "validation"
  conditionCollection = "conditions"

  hostUrl = "https://{{domain_name}}/"
  preprodHostUrl = "https://{{domain_name}}/"

  host =  "https://{{domain_name}}/"
  internal_kong_ip_core = "https://{{domain_name}}/api/private/mlcore/api/"
  public_url_for_core_service = "https://{{domain_name}}/api/cloud-services/mlcore/"
  internal_kong_ip_survey = "https://{{domain_name}}/api/private/mlsurvey/api/"
  keyclockapibody = "{{ml_template_validation_backend_service_keyclockbody}}"
  authorization = "Bearer "
  authorizationforhost = "Bearer "
  internal_access_token = ""
  appname = "karmayogi"
  x_channel_id = "{{ml_template_validation_backend_service_x_channel_id}}"
  keyclockapicontent_type = "application/x-www-form-urlencoded"
  content_type = "application/json"
  keyclockapiurl = "/auth/realms/sunbird/protocol/openid-connect/token"
  userinfoapiurl = "api/private/user/v1/search"
  searchforlocation = "api/data/v1/location/search"
  criteriauploadapiurl = "v1/criteria/upload"
  themeuploadapiurl = "v1/frameworks/uploadThemes/"
  programupdateapi = "v1/programs/update/"
  programdetailsapi = "v1/programs/details/"
  solutioncreationapiurl = "v1/observations/importFromFramework"
  surveysolutioncreationapiurl = "v1/surveys/createSolutionTemplate"
  questionuploadapiurl = "v1/questions/bulkCreate"
  importsurveysolutiontemplateurl = "v1/surveys/importSurveryTemplateToSolution/"
  importsurveysolutiontoprogramurl = "v1/surveys/mapSurverySolutionToProgram/"
  solutiontoprogrammappingapiurl = "v1/solutions/importFromSolution"
  fetchprograminfoapiurl = "v1/programs/list?page=1&limit=1000&search="
  fetchsolutiondetails = "v1/solutions/list?type="
  frameworkcreationapi = "v1/frameworks/create"
  solutionupdateapi = "v1/solutions/update/"
  listofrolesapi = "v1/userRoles/list"
  ferchsolutioncriteria = "v1/solutionDetails/criteria/"
  projectuploadapi = "v1/project/templates/bulkCreate"
  taskuploadapi = "v1/project/templateTasks/bulkCreate/"
  projectsolutioncreationapi = "v1/solutions/create"
  mapsolutiontoproject = "v1/project/templates/importProjectTemplate/"
  fetchsolutiondoc = "v1/solutions/getDetails/"
  programcreationurl = "v1/programs/create"
  pdpmurl = "v1/userExtension/bulkUpload"
  fetchlink = "v1/solutions/fetchLink/"
  courseprogrammapping = "v1/solutions/create"
  readcourseurl = "/api/content/v1/read/"
  fetchsolutiondump = "v1/solutions/getDetails/"
  fetchorgdetails = "api/org/v1/search"
  fetchprojectlist = "v1/library/categories/projects"
  dbfindapi_url = "v1/admin/dbFind/"
  addingbasetemp = "v1/certificateBaseTemplates/createOrUpdate"
  getpresignedurl = "v1/files/preSignedUrls?serviceUpload=true"
  downloadSuccessSheet = "https://{{domain_name}}/content-store/"
  errBasic = 300
  errAdv = 301